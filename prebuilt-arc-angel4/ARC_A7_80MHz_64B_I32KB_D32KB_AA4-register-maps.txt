######## ARC770D_R41018_PER_AA4_6 --- com.arc.templates.project.ARC770D.1_0 ########

# BuildHTMLDocs --- When true build the HTML documentation during a build
-build_html_docs false

# BuildSoftware --- Creates software under the Software directory.
-build_software false

# BuildTestCode --- When true build the test code during a build
-build_test_code false

# BuildScripts --- When true build the scripts during a build
-build_scripts true

# BuildHDL --- When true build the HDL during a build
-build_hdl true

# CompileTestCode --- When true compile the test code
-compile_test_code false

# GenerateStructuralHDL --- When true generate the neccessary structural HDL
-generate_structural_hdl true

# CompileForHDLSimulation --- When true compile the HDL ready for simulation
-compile_hdl_for_simulation false

# CompileSynthesisableRAMs --- Generates RAM models, either for ASIC depending upon the Reference Design Flow (e.g. Synopsys), or for ARCangel when it is selected.
-generate_synthesisable_ram_models false

# GenerateScriptForDesignCompiler --- When true generate the scripts to use for synthesis analysis and elaboration
-generate_synthesis_scripts true

# RunARCrams --- Run ARCrams on the current build, this will stitch in vendor supplied RAM models and update the synthesis and simulation environment to use the models.
-run_arcrams false

# RunARCtestInfo --- Run ARCtest -info to get information on what tests need to be run
-run_arctest_info false

# RunARCtest --- Set to true to run ARCtest on the build.
-run_arctest false

# RunARCsyn --- Synthesize design using ARCsyn
-run_arcsyn false

# BuildXCAM --- When true, build the XCAM cycle accurate model from HDL (requires XCAM library).
-build_xcam false

# RunARCtestVTOC --- Set to true to run ARCtest on the build in vtoc directory.
-run_arctest_xcam false

# CompileCASExtensions --- Build CAS extensions for any EIA components in the current design using their C Models.
-compile_cas_extensions false

# CompileISSExtensions --- Build ISS extensions for any EIA components in the current design using their C Models.
-compile_iss_extensions false

# CompileTranslatedCASExtensions --- Converts EIA extensions from Verilog to C++ and compiles the model for the ISS.
-compile_v2c_extensions false

# CompileTranslatedISSExtensions --- Converts EIA extensions from Verilog to C++ and compiles the model for the ISS.
-compile_v2i_extensions false

# RunARCtest_iss --- Run ARCtest on iss model.  Note that the test code and HDL must have been built and compiled.
-run_arctest_iss false

# RunARCtest_cas --- Run ARCtest on the cas model.  Note that the test code and HDL must have been built and compiled.
-run_arctest_cas false

# RunARCtest_v2i --- Run ARCtest on the verilated iss model.  Note that the test code and HDL must have been built and compiled.
-run_arctest_v2i false

# RunARCtest_v2c --- Run ARCtest on the verilated cas model.  Note that the test code and HDL must have been built and compiled.
-run_arctest_v2c false

# OnlyEIAtests --- This overwrites the normal test.xref with an alternative that only includes the EIA tests, used to reduce EIA test time.
-onlyeiatests false

# NoJtag --- <Option's description>
-nojtag false

# RunSeeCode --- Starts the SeeCode debugger with the correct command line options to invoke the selected simulator target.  A dialog box will be displayed so that a compiled executable can be selected to run on the simulator.
# 
# None : Does not run SeeCode (default).
# Verilog : SeeCode runs a Verilog simulation, using the RASCAL testbench.
# CAS Model : SeeCode invokes the CAS model, with extensions modelled in C++.
# ISS Model : SeeCode invokes the ISS model, with extensions modelled in C++.
# V2C Model : SeeCode invokes the CAS model, with extensions translated from Verilog.
# V2I Model : SeeCode invokes the ISS model, with extensions translated from Verilog.
-run_seecode None

# RunARCformal --- Formal Verification using ARCformal
-run_arcformal false

# RunSEIF --- Run Synopsys Embedit Integrator Flow to generate configured memory instances
-run_seif false

# RunARCpower --- Run the Power Analysis using RTL simulation to derive the activity
-run_arcpower false


######## System --- com.arc.hardware.System.1_0 ########

# Create System
-create com.arc.hardware.System.1_0 System

# ClockSpeed --- The desired clock speed of the system
-clock_speed 80

# ClockSkew --- The clock skew for the system
-clock_skew 0.2

# ClockRatio --- Ratio between cpu clock and system clock. Affects testbench clocks, synthesis scripts and xCAM models. This does not change the processor core RTL generated by ARChitect.
-clock_ratio 1

# DDR2_clk_Ratio --- DDR2 Clock Vs System Clock Ratio
# 2x
# 3x
# 4x
-ddr2_clk_ratio 3x

# HDLLanguage --- Select which HDL language you want to use
-language verilog

# Testbench --- Choose the testbench you would like to use.  Rascal is an interface that allows SeeCode to control the processor, 'Standalone' uses HMSL to control the processor.
-testbench rascal

# ArcNum --- The processor number as read back in the ARCNUM field of the IDENTITY register.
-arc_num 0

# SynthesisLevel --- Sets the top level module name for synthesis. 
-synthesislevel cpu_isle

# Endianness --- Configures whether the system is big-endian or little-endian
-endianness little

# UniqueBuildName --- Allows a unique build to be created from ARChitect by appending the unique identified on all HDL and file names.
-unique_build_name ""

# BISTPorts --- Ports at the top-level which are connected to each RAM wrapper and can be used for connecting any BIST signals from the RAM wrapper to the external world. Note that ARC doesn't provide a BIST solution.
-bist_ports false

# BISTMuxes --- Muxes that switch between BIST mode and mission mode. These muxes are inserted within the core rather than within the RAM wrapper, which is often better for timing as the muxes are placed on the least critical path available.
-bist_muxes false

# ScanChains --- If inserting scan chains during synthesis, this will set the number of chains required
-scan_chains 5

# AutoClockGating --- This option controls whether automatic clock gating is enabled within the synthesis tool.
-auto_clock_gating false

# Floorplan --- Reference to set of floorplan description files that are used to guide the autogeneration of a real floorplan inside a floorplanning tool.
-floorplan ARC770D

# GateLevelSim --- When selected the gate level sim test code and scripts would be installed to run ARCgatesim
-gatesim false

# UserLibraryName --- The name for your HDL library
-library_name user

# IncludePipeMon --- Include the pipeline display debug module ('rascal' = C++ version, 'full' = Verilog version).
-pdisp full

# SimulatorName --- The name of the simulator you wish to use
-simulator none

# vcs64 --- Enables support for 64 bit VCS in compilation makefiles.
-vcs64 false

# verilog_2001 --- Enable Verilog 2001 file-io syntax (if false: use pli)
-verilog_2001 false

# UseDummyModules --- When true the ME,VLD and SIMD units will be instantiated as wrappers only.
-dummy_modules false

# HoldMargin --- Hold margin definition used for hold holdfixing.
-hold_margin 0.05

# optional_encryption --- 
# When selected, encrypted RTL output is generated.
# 	
-optional_encryption false

# ignore_encrypt_license --- 
# When selected, pretend the encryption license is missing.  For testing.
# 	
-ignore_encrypt_license false

# ignore_clear_license --- 
# When selected, pretend the cleartest license is missing.  For testing.
# 	
-ignore_clear_license false

# generate_ipxact --- 
# Generate ipxact.xml file describing the CPUisle or archipelago frontier
# 
-generate_ipxact true


######## ARC700 --- com.arc.hardware.ARC_700.ARC700.1_0 ########

# Create ARC700
-create com.arc.hardware.ARC_700.ARC700.1_0 System.ARC700

# arc700 --- Add the ARC 700 processor component to the design.
-arc700 true

# ResetState --- Determines whether the processor will be halted or running after a reset is de-asserted.
-reset_state halt

# NumInterrupts --- The total number of interrupts on the ARC Core
-ext_interrupts 32

# UserExtensions --- Hardware support for user created extension instructions, flags and registers.
-user_ext false

# DummyExtensions --- Example Extension Instructions, Flags, Condition Codes, Auxiliary Registers and Core Registers
-dummy_ext false

# IslandBusWidth --- The width of data busses in the ARC 700 island memory interfaces
-island_bus_width 64bit

# VectorBaseAddr --- Defines the base address of the interrupt and exception vector table. Base address values must be aligned to 1k address boundaries.
-VectorBaseAddr 0

# bpu_btac_entries --- Selects the number of BTAC entries to implement in the BPU.
-bpu_btac_entries 512

# bpu_tag_match --- Select whether the full (up to bit 31) or partial PC address is used for tag matching. Selecting partial tag matching can result in address aliasing, leading to a degredation in execution performance. It has the advantage of using a smaller size of the BTAC ram than the one used for full tag matching, which eliminates address aliasing.
-bpu_tag_match full

# stack_checking --- Include logic for validating stack accesses. Stack access violations are subjected to privilege violation exceptions.
-stack_checking false

# llock_scond --- Include special atomic instructions Link-Lock Load (LLOCK) and Store Conditional (SCOND).
-llock_scond true


######## Xmac --- com.arc.hardware.ARC_700.Xmac.1_0 ########

# Create Xmac
-create com.arc.hardware.ARC_700.Xmac.1_0 System.Xmac

# Xmac --- Add the XMAC component to the design.
-xmac true


######## BVCIArbitratorAndBridge --- com.arc.hardware.ARC_MSS.BVCIArbitratorAndBridge.1_0 ########

# Create BVCIArbitratorAndBridge
-create com.arc.hardware.ARC_MSS.BVCIArbitratorAndBridge.1_0 System.BVCIArbitratorAndBridge

# PeripheralBaseAddress --- Set Peripheral Base Address 
-peripheral_base 0xc0fc0000

# bvci_arb --- Add the BVCI Arbiter and Bridge component to the design.
-bvci_arb true

# RemovePeripheralArbiter --- Remove the peripheral arbiter
-remove_p_arb false

# BVCIBusWidth --- This selects the data width of the BVCI interfaces on the processor. Note that this setting is only valid for BVCI bus builds. It has no meaning for AHB or Legacy builds.
-bvci_data_width 64bits

# OffChipRAM --- The off chip RAM option will currently always be true, if you have the memory arbitrator.
-off_chip_ram yes


######## InstructionCache --- com.arc.hardware.ARC_700.InstructionCache.1_0 ########

# Create InstructionCache
-create com.arc.hardware.ARC_700.InstructionCache.1_0 System.InstructionCache

# CacheSize --- Instruction cache size (in kBytes)
-icache_size 32k

# ICacheLineLength --- Instruction cache line length in bytes
-ic_line_length 64


######## DataCache --- com.arc.hardware.ARC_700.DataCache.1_0 ########

# Create DataCache
-create com.arc.hardware.ARC_700.DataCache.1_0 System.DataCache

# DataCacheSize --- Size of Data Cache
-dcache_size 32k

# DLineLength --- Data cache line length in bytes
-dc_line_length 64

# SplitMapMem --- Enables the option to have the data fetch memory map split in two, with the upper 2GB mapping to the lower 2GB. Accesses in the lower 2GB will be cached unless .di form instructions are used, accesses in the upper half will be uncached.
-split_map_mem false


######## JtagInterface --- com.arc.hardware.ARC_700.JtagInterface.1_0 ########

# Create JtagInterface
-create com.arc.hardware.ARC_700.JtagInterface.1_0 System.JtagInterface

# DebugInterface --- Add the Jtag Interface component to the design.
-debug_comms_jtag true

# JTAGFrequency --- Select the frequency of the JTAG clock Tck (in MHz).
# 
# The JTAG clock speed has to be less than 1/2 of the cpu clock otherwise the signals on the BVCI interface are not guaranteed to be valid.
# 
# NOTE: The RTL simulations will work when the JTAG clock frequency is set to half the CPU clock, however this may not be the case when simulating at gate level due to delays on the IO pads.
# 
# The default is set to 10 MHz so that there is no conflict when simulating with an ARCangel3 at 30MHz. (30 > 10*2)
# 
# The speed of simulation can be greatly increased by using a faster JTAG clock, but a dependency will warn if it exceeds 1/2 of the cpu clock.
# 
-jtag_tclk 10

# Jtag700 --- This option can be used in conjuction with the -remove_component switch on the command line to remove the ARC700 JtagInterface component, without accidentally remove the ARC600 component on dual core builds.
-jtag_700 true


######## MMU --- com.arc.hardware.ARC_700.MMU.1_0 ########

# Create MMU
-create com.arc.hardware.ARC_700.MMU.1_0 System.MMU

# MMU --- Add the MMU (Memory Management Unit) component to the design.
-mmu true

# Version --- Selects configuration of MMU and Cache subsystems
-mmu_version NormalMode

# MMUJointTLBEntries --- Number of entries in the joint TLB (TLB depth x associativity)
-mmu_joint_tlb_entries 512

# MMUPageSizeRange --- This selects the MMU page size in bytes (fixed1kPage, fixed2kPage, fixed4kPage, fixed8kPage, fixed16kPage)
-mmu_page_size_range fixed4kPage

# SharedLibASID --- This option enables the MMU page mappings to support single mapping entries for up to 32 shared libraries. For full details see the ARC 700 MMU manual.
-shared_lib_asid true


######## SdramController --- com.arc.hardware.ARC_MSS.SdramController.1_0 ########

# Create SdramController
-create com.arc.hardware.ARC_MSS.SdramController.1_0 System.SdramController

# SDRAMController --- Add the SDRAM Controller component to the design.
-sdram_sequencer true

# MinimiseIODelays --- ARCangel4 only option. This option minimises the I/O delays by packing the registers on the SDRAM interface into the FPGA I/O blocks, thus allowing additional time for external input/output delays. This will allow the SDRAM interface to run at speeds up to 100MHz, but requires the roboclock settings to be set to -4tu.
-minimise_sdram_io_delays true


######## Synplify RDF --- com.synplicity.DesignFlow.1_0 ########

# Create Synplify RDF
-create com.synplicity.DesignFlow.1_0 "System.Synplify RDF"

# SynplifyRDF --- Add the Synplify RDF to the build
-synplify_rdf true

# FPGAToolFlow --- This options allows the user to select the synthesis tool to use when creating an FPGA build.
-fpga_tool synplify_premier

# SynplifyPremierVersion --- Synplify tool version. Use "2010" for 2010.x and all newer versions.
-syn_ver 2010


######## Xilinx RDF --- com.xilinx.DesignFlow.1_0 ########

# Create Xilinx RDF
-create com.xilinx.DesignFlow.1_0 "System.Xilinx RDF"

# XilinxRDF --- Add the Xilinx RDF to the build
-xilinx_rdf true

# XilinxToolVersion --- Xilinx tool version
-xilinx_ver 13

# XilinxExtraEffortLevel --- Extra effort level for mapping and P&R. Used to gain best results but increase runtime.
-xilinx_xe false


######## ARCangel4 --- com.arc.boards.ARCangel4.1_0 ########

# Create ARCangel4
-create com.arc.boards.ARCangel4.1_0 System.ARCangel4

# ARCangel4 --- Add the ARCangel4 Board to the build
-arcangel4 true

# DeviceName --- List the available FPGA devices for the board
-fpga_device_name XC4VLX200

# DeviceSpeedGrade --- Speed grade availabe for the devices
-fpga_device_speed_grade 11

# DevicePackage --- Available packages for the FPGA devices
-fpga_device_package FF1513


######## idecontroller --- com.arc.hardware.IDEController.1_0 ########

# Create idecontroller
-create com.arc.hardware.IDEController.1_0 System.idecontroller

# IDE_Controller_Enabled --- Add an IDE controller to the design. This controller only supports basic PIO mode 4 operations and is for use with the ARCangel 4
-ide_controller true


######## EMAC --- com.arc.hardware.EMAC.2_7 ########

# Create EMAC
-create com.arc.hardware.EMAC.2_7 System.EMAC

# NumberOfVMACs --- Input number of EMACs for build.
-emac 1

# EMACInterrupt0 --- Interrupt allocation for EMAC Interrupt 0 for ARC processor
-emacinterrupt0 16

# EMACInterrupt1 --- Interrupt allocation for EMAC Interrupt 1 for ARC processor
-emacinterrupt1 17

# EMACInterrupt2 --- Interrupt allocation for EMAC Interrupt 2 for ARC processor
-emacinterrupt2 18

# EMACInterrupt3 --- Interrupt allocation for EMAC Interrupt 3 for ARC processor
-emacinterrupt3 19

# EMACInterrupt4 --- Interrupt allocation for EMAC Interrupt 4 for ARC processor
-emacinterrupt4 20

# EMACInterrupt5 --- Interrupt allocation for EMAC Interrupt 5 for ARC processor
-emacinterrupt5 21

# EMACInterrupt6 --- Interrupt allocation for EMAC Interrupt 6 for ARC processor
-emacinterrupt6 22

# EMACInterrupt7 --- Interrupt allocation for EMAC Interrupt 7 for ARC processor
-emacinterrupt7 23

# EMACInterrupt --- Interrupt allocation for EMAC Interrupt 0 for ARC processor
-emacinterrupt 6


######## UART --- com.arc.hardware.ARC_MSS.UART.2_0 ########

# Create UART
-create com.arc.hardware.ARC_MSS.UART.2_0 System.UART

# DefaultBaudRateForAllUARTs --- Default Baud Rate For UART
-uart_baud_rate 115200

# UART_enabled --- Add the UART component to the design.
-uart true

# num_of_uarts --- Selects the number of UART instantiations. From 1 to 3.
-num_of_uart 1


######## BVCIBusProfiler --- com.arc.hardware.ARC_MSS.BVCIBusProfiler.1_0 ########

# Create BVCIBusProfiler
-create com.arc.hardware.ARC_MSS.BVCIBusProfiler.1_0 System.BVCIBusProfiler

# BVCIBusProfiler --- Add the BVCI Bus Hardware Profiler to the design
-bvci_bus_profiler false

# LatencyUnit --- Add Latency unit to profiler
-latency_unit true

# IncludeLatUnit0 --- <Option's description>
-include_lat_unit_0 true

# IncludeLatUnit1 --- <Option's description>
-include_lat_unit_1 true

# IncludeLatUnit2 --- <Option's description>
-include_lat_unit_2 false

# IncludeLatUnit3 --- <Option's description>
-include_lat_unit_3 false

# IncludeLatUnit4 --- <Option's description>
-include_lat_unit_4 true

# IncludeLatUnit5 --- <Option's description>
-include_lat_unit_5 false

# IncludeLatUnit6 --- <Option's description>
-include_lat_unit_6 false

# IncludeLatUnit7 --- <Option's description>
-include_lat_unit_7 false

# IncludeLatUnit8 --- <Option's description>
-include_lat_unit_8 false

# IncludeLatUnit9 --- <Option's description>
-include_lat_unit_9 false

# IncludeLatUnit10 --- <Option's description>
-include_lat_unit_10 false

# IncludeLatUnit11 --- <Option's description>
-include_lat_unit_11 false

# IncludeLatUnit12 --- <Option's description>
-include_lat_unit_12 false

# lat_depth --- Depth of the Latency Unit's FIFO. This determines the maximum latency that this unit can support.
-Latency_fifo_depth 64


